.. SPDX-License-Identifier: GPL-2.0+
.. Copyright (C) 2017, Tuomas Tynkkynen <tuomas.tynkkynen@iki.fi>

QEMU ARM
========

QEMU for ARM supports a special 'virt' machine designed for emulation and
virtualization purposes. This document describes how to run U-Boot under it.
Both 32-bit ARM and AArch64 are supported.

The 'virt' platform provides the following as the basic functionality:

    - A freely configurable amount of CPU cores
    - U-Boot loaded and executing in the emulated flash at address 0x0
    - A generated device tree blob placed at the start of RAM
    - A freely configurable amount of RAM, described by the DTB
    - A PL011 serial port, discoverable via the DTB
    - An ARMv7/ARMv8 architected timer
    - PSCI for rebooting the system
    - A generic ECAM-based PCI host controller, discoverable via the DTB

Additionally, a number of optional peripherals can be added to the PCI bus.

Building U-Boot
---------------
Set the CROSS_COMPILE environment variable as usual, and run:

- For ARM::

    make qemu_arm_defconfig
    make

- For AArch64::

    make qemu_arm64_defconfig
    make

Running U-Boot
--------------
The minimal QEMU command line to get U-Boot up and running is:

- For ARM::

    qemu-system-arm -machine virt -bios u-boot.bin

- For AArch64::

    qemu-system-aarch64 -machine virt -cpu cortex-a57 -bios u-boot.bin

Note that for some odd reason qemu-system-aarch64 needs to be explicitly
told to use a 64-bit CPU or it will boot in 32-bit mode.

Additional persistent U-boot environment support can be added as follows:

- Create envstore.img using qemu-img::

    qemu-img create -f raw envstore.img 64M

- Add a pflash drive parameter to the command line::

    -drive if=pflash,format=raw,index=1,file=envstore.img

Additional peripherals that have been tested to work in both U-Boot and Linux
can be enabled with the following command line parameters:

- To add a Serial ATA disk via an Intel ICH9 AHCI controller, pass e.g.::

    -drive if=none,file=disk.img,id=mydisk -device ich9-ahci,id=ahci -device ide-drive,drive=mydisk,bus=ahci.0

- To add an Intel E1000 network adapter, pass e.g.::

    -netdev user,id=net0 -device e1000,netdev=net0

- To add an EHCI-compliant USB host controller, pass e.g.::

    -device usb-ehci,id=ehci

- To add a NVMe disk, pass e.g.::

    -drive if=none,file=disk.img,id=mydisk -device nvme,drive=mydisk,serial=foo

These have been tested in QEMU 2.9.0 but should work in at least 2.5.0 as well.

Debug UART
----------

The debug UART on the ARM virt board uses these settings::

    CONFIG_DEBUG_UART=y
    CONFIG_DEBUG_UART_PL010=y
    CONFIG_DEBUG_UART_BASE=0x9000000
    CONFIG_DEBUG_UART_CLOCK=0

Enabling Uefi Capsule Update feature
------------------------------------

Support has been added for the uefi capsule update feature which
enables updating the u-boot image using the uefi firmware management
protocol (fmp). The capsules are not passed to the firmware through
the UpdateCapsule runtime service. Instead, capsule-on-disk
functionality is used for fetching the capsule from the EFI System
Partition (ESP).

Currently, support has been added for updating the u-boot binary as a
raw image when the platform is booted in non-secure mode, i.e with
CONFIG_TFABOOT disabled. For this configuration, the qemu platform
needs to be booted with 'secure=off'. The u-boot binary placed on the
first bank of the Nor Flash at offset 0x0. The u-boot environment is
placed on the second Nor Flash bank at offset 0x4000000.

The capsule update feature is enabled with the following configs::

    CONFIG_MTD=y
    CONFIG_FLASH_CFI_MTD=y
    CONFIG_CMD_MTDPARTS=y
    CONFIG_CMD_DFU=y
    CONFIG_DFU_MTD=y
    CONFIG_EFI_CAPSULE_ON_DISK=y
    CONFIG_EFI_CAPSULE_FIRMWARE_MANAGEMENT=y
    CONFIG_EFI_CAPSULE_FIRMWARE=y
    CONFIG_EFI_CAPSULE_FIRMWARE_RAW=y
    CONFIG_EFI_CAPSULE_FMP_HEADER=y

In addition, the following config needs to be disabled::
    CONFIG_TFABOOT

The capsule file can be generated by using the GenerateCapsule.py
script in edk2::

    $ ./BaseTools/BinWrappers/PosixLike/GenerateCapsule -e -o \
    <capsule_file_name> --fw-version <val> --lsv <val> --guid \
    e2bb9c06-70e9-4b14-97a3-5a7913176e3f --verbose --update-image-index \
    <val> --verbose <u-boot.bin>

If the above edk2 script is being used for generating the capsule, the
following additional config needs to be enabled::
    CONFIG_EFI_CAPSULE_FMP_HEADER=y

As per the uefi specification, the capsule file needs to be placed on
the EFI System Partition, under the EFI/UpdateCapsule/ directory. The
EFI System Partition can be a virtio-blk-device.

Before initiating the firmware update, the efi variables BootNext,
BootXXXX and OsIndications need to be set. The BootXXXX variable needs
to be pointing to the EFI System Partition which contains the capsule
file. The BootNext, BootXXXX and OsIndications variables can be set
using the following commands::

    => efidebug boot add 0 Boot0000 virtio 0:1 <capsule_file_name>
    => efidebug boot next 0
    => setenv -e -nv -bs -rt -v OsIndications =0x04
    => saveenv

Finally, the capsule update can be initiated with the following
command::

    => efidebug capsule disk-update

The updated u-boot image will be booted on subsequent boot.

Enabling Capsule Authentication
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The uefi specification defines a way of authenticating the capsule to
be updated by verifying the capsule signature. The capsule signature
is computed and prepended to the capsule payload at the time of
capsule generation. This signature is then verified by using the
public key stored as part of the X509 certificate. This certificate is
in the form of an efi signature list (esl) file, which is embedded as
part of the platform's device tree blob using the mkeficapsule
utility.

The capsule authentication feature can be enabled through the
following config, in addition to the configs listed above for capsule
update::

    CONFIG_EFI_CAPSULE_AUTHENTICATE=y

The public key esl file can be embedded in the dtb with the following
command::
    ./tools/mkeficapsule -K <pub_key.esl> -D <dtb>

Running the above command results in the creation of a 'signature'
node in the dtb, under which the public key is stored as a
'capsule-key' property.

Once the esl file has been embedded as part of the dtb, the platform
needs to be be booted with this dtb. This can be done by disabling the
CONFIG_OF_BOARD option, and then, passing the above dtb file to the
u-boot build.

The capsule update with authentication can be enabled on the platform
with the following steps

1. Install utility commands on your host
    * openssl
    * efitools

2. Create signing keys and certificate files on your host::

        $ openssl req -x509 -sha256 -newkey rsa:2048 -subj /CN=CRT/ \
                -keyout CRT.key -out CRT.crt -nodes -days 365
        $ cert-to-efi-sig-list CRT.crt CRT.esl

        $ openssl x509 -in CRT.crt -out CRT.cer -outform DER
        $ openssl x509 -inform DER -in CRT.cer -outform PEM -out CRT.pub.pem

        $ openssl pkcs12 -export -out CRT.pfx -inkey CRT.key -in CRT.crt
        $ openssl pkcs12 -in CRT.pfx -nodes -out CRT.pem

3. Store the esl file generated above as part of the dtb::

        $ ./tools/mkeficapsule -K <pub_key.esl> -D <dtb>

4. The capsule file can be generated by using the GenerateCapsule.py
   script in edk2::

        $ ./BaseTools/BinWrappers/PosixLike/GenerateCapsule -e -o \
	<capsule_file_name> --monotonic-count <val> --fw-version \
	<val> --lsv <val> --guid \
	e2bb9c06-70e9-4b14-97a3-5a7913176e3f --verbose \
	--update-image-index <val> --signer-private-cert \
	/path/to/CRT.pem --trusted-public-cert \
	/path/to/CRT.pub.pem --other-public-cert /path/to/CRT.pub.pem \
	<u-boot.bin>

Once the capsule has been generated, use the same instructions as
mentioned above for placing the capsule on the EFI System Partition

5. Building u-boot with the following steps::

       $ make qemu_arm64_defconfig
       $ make menuconfig
            Disable CONFIG_OF_BOARD and CONFIG_TFABOOT
       $ make EXT_DTB=<dtb> all

6. Enable capsule authentication by setting the following env
   variable::

        => setenv capsule_authentication_enabled 1
        => saveenv

Setting the environment variable capsule_authentication_enabled
enables the capsule authentication.

Once the capsule has been placed on the EFI System Partition and the
above env variable has been set, along with the BootXXXX and the
BootNext variables, the capsule update can be initiated
using the same command as that shown above.
